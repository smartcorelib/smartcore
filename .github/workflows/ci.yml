name: CI

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [development]

jobs:
  tests:
    runs-on: "${{ matrix.platform.os }}-latest"
    strategy:
      matrix:
        platform:
          [
            { os: "windows", target: "x86_64-pc-windows-msvc" },
            { os: "windows", target: "i686-pc-windows-msvc" },
            { os: "ubuntu", target: "x86_64-unknown-linux-gnu" },
            { os: "ubuntu", target: "i686-unknown-linux-gnu" },
            { os: "ubuntu", target: "wasm32-unknown-unknown" },
            { os: "macos", target: "aarch64-apple-darwin" },
            { os: "ubuntu", target: "wasm32-wasi" },
          ]
    env:
      TZ: "/usr/share/zoneinfo/your/location"
    steps:
      - uses: actions/checkout@v3
      - name: Cache .cargo and target
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-cargo-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.toml') }}
      - name: Install WSL
        if: matrix.platform.target == 'x86_64-pc-windows-msvc'
        uses: Vampire/setup-wsl@v1
        with:
          additional-packages: cargo
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}
          profile: minimal
          default: true
      - name: Install test runner for wasm
        if: matrix.platform.target == 'wasm32-unknown-unknown'
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - name: Install test runner for wasi
        if: matrix.platform.target == 'wasm32-wasi'
        run: curl https://wasmtime.dev/install.sh -sSf | bash
      - name: Stable Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features --target ${{ matrix.platform.target }}
      - name: Tests
        if: matrix.platform.target == 'x86_64-unknown-linux-gnu' || matrix.platform.target == 'aarch64-apple-darwin'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features
      - shell: wsl-bash {0}
        if: matrix.platform.target == 'x86_64-pc-windows-msvc'
        run: cargo test --all-features
      - name: Tests in WASM
        if: matrix.platform.target == 'wasm32-unknown-unknown'
        run: wasm-pack test --node -- --all-features
      - name: Tests in WASI
        if: matrix.platform.target == 'wasm32-wasi'
        run: |
          export WASMTIME_HOME="$HOME/.wasmtime"
          export PATH="$WASMTIME_HOME/bin:$PATH"
          cargo install cargo-wasi && cargo wasi test

  check_features:
    runs-on: "${{ matrix.platform.os }}-latest"
    strategy:
      matrix:
        platform: [{ os: "ubuntu" }]
        features: ["--features serde", "--features datasets", ""]
    env:
      TZ: "/usr/share/zoneinfo/your/location"
    steps:
      - uses: actions/checkout@v3
      - name: Cache .cargo and target
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo
            ./target
          key: ${{ runner.os }}-cargo-features-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-cargo-features-${{ hashFiles('**/Cargo.toml') }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}
          profile: minimal
          default: true
      - name: Stable Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --no-default-features ${{ matrix.features }}
